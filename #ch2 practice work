{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "24.333333333333332\n",
      "5\n",
      "38\n",
      "1024\n",
      "3\n",
      "29.95\n"
     ]
    }
   ],
   "source": [
    "#Q2\n",
    "#2.1(a)\n",
    "x=1+2+3+4+5\n",
    "print(x)\n",
    "#b\n",
    "x=(23+19+31)/3\n",
    "print(x)\n",
    "#c\n",
    "x=403//73\n",
    "print(x)\n",
    "#d\n",
    "x=403%73\n",
    "print(x)\n",
    "#E\n",
    "y=(2**10)\n",
    "print(y)\n",
    "#F\n",
    "x=abs (54 - 57 )\n",
    "print(x)\n",
    "#g\n",
    "y= min(34.99, 29.95, 31.50)\n",
    "print(y)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "True\n",
      "True\n",
      "False\n",
      "True\n",
      "False\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#2.2\n",
    "#(a)\n",
    "x=2 + 2 < 4\n",
    "print(x)\n",
    "#(b)\n",
    "x=7 // 3 == 1 + 1\n",
    "print(x)\n",
    "#(c)\n",
    "x=3**2 + 4**2 == 25\n",
    "print(x)\n",
    "#(d)\n",
    "x=2 + 4 + 6 > 12 \n",
    "print(x)\n",
    "#e\n",
    "x=1387 % 19 == 0\n",
    "print(x)\n",
    "#f\n",
    "x=31 % 2 == 0 \n",
    "print(x)\n",
    "#g\n",
    "x=min(34.99, 29.95, 31.50) < 30.00\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "4\n",
      "25\n"
     ]
    }
   ],
   "source": [
    "#2.3\n",
    "#a\n",
    "a = 3\n",
    "print(a)\n",
    "#b\n",
    "b = 4\n",
    "print(b)\n",
    "#c\n",
    "c = a * a + b * b\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "antbatcod\n",
      "antantantantantantantantantant\n",
      "antbatbatcodcodcod\n",
      "antbatantbatantbatantbatantbatantbatantbat\n",
      "batbatcodbatbatcodbatbatcod\n"
     ]
    }
   ],
   "source": [
    "#2.4\n",
    "s1 = 'ant'\n",
    "s2 = 'bat'\n",
    "s3 = 'cod'\n",
    "#a\n",
    "x=s1 + ''+ s2 + ''+ s3\n",
    "print(x)\n",
    "#b\n",
    "x=10 * (s1 + '')\n",
    "print(x)\n",
    "#c\n",
    "x=s1 + '' + 2 * (s2 + '') + 2 * (s3 + '') + s3\n",
    "print(x)\n",
    "#d\n",
    "x=7 * (s1 + ''+ s2 + '')\n",
    "print(x)\n",
    "#e\n",
    "x=3 * (2 * s2 + s3 + '')\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'9'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2.5\n",
    "s = '0123456789'\n",
    "#a\n",
    "s[0]\n",
    "#b\n",
    "s[1]\n",
    "#c\n",
    "s[6]\n",
    "#d\n",
    "s[8]\n",
    "#e\n",
    "s[9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "badminton\n",
      "racket\n"
     ]
    }
   ],
   "source": [
    "#2.6\n",
    "words = ['bat', 'ball', 'racket', 'basket', 'badminton']\n",
    "a=min(words)\n",
    "print(a)\n",
    "b=max(words)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2.7\n",
    "grades = [9, 7, 7, 10, 3, 9, 6, 6, 2]\n",
    "#part a\n",
    "a=grades.count(7)\n",
    "print(a)\n",
    "#part b\n",
    "grades[8]=4\n",
    "print(grades)\n",
    "#partc\n",
    "c=max(grades)\n",
    "print(c)\n",
    "#part d\n",
    "d=grades.sort()\n",
    "print(d)\n",
    "#part e\n",
    "e=sum(grades) / len(grades)\n",
    "print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-28\n",
      "10.651685393258427\n",
      "9.5367431640625e-07\n",
      "265716\n",
      "34\n"
     ]
    }
   ],
   "source": [
    "#2.11\n",
    "#a\n",
    "x=-7-6-5-4-3-2-1\n",
    "print(x)\n",
    "#b\n",
    "import math\n",
    "total_kids=17+24+21+27\n",
    "avg=((17*9)+(24*10)+(21*11)+(27*12))/total_kids\n",
    "print(avg)\n",
    "#c\n",
    "import math\n",
    "x=2**-20\n",
    "print(x)\n",
    "#d\n",
    "x=61*4356\n",
    "print(x)\n",
    "#e\n",
    "x=4365%61\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-+\n",
      "-+-\n",
      "+--\n",
      "+--+--\n",
      "+--+--+--+--+--+--+--+--+--+--+\n",
      "+-+++--+-+++--+-+++--+-+++--+-+++--\n"
     ]
    }
   ],
   "source": [
    "#2.12\n",
    "\n",
    "s1= '-'\n",
    "s2= '+'\n",
    "x1=s1+s2\n",
    "x2=s1+s2+s1\n",
    "x3=s2+s1+s1\n",
    "x4=s2+s1+s1+s2+s1+s1\n",
    "x5=s2+s1+s1+s2+s1+s1+s2+s1+s1+s2+s1+s1+s2+s1+s1+s2+s1+s1+s2+s1+s1+s2+s1+s1+s2+s1+s1+s2+s1+s1+s2 \n",
    "x6=s2+s1+s2+s2+s2+s1+s1+s2+s1+s2+s2+s2+s1+s1+s2+s1+s2+s2+s2+s1+s1+s2+s1+s2+s2+s2+s1+s1+s2+s1+s2+s2+s2+s1+s1\n",
    "print(x1)\n",
    "print(x2)\n",
    "print(x3)\n",
    "print(x4)\n",
    "print(x5)\n",
    "print(x6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "abcdefghijklmnopqrstuvwxyz\n"
     ]
    }
   ],
   "source": [
    "#2.13\n",
    "\n",
    "s='abcdefghijklmnopqrstuvwxyz'\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(True, False, False, False, False, False)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2.14\n",
    "s='goodbye'\n",
    "s[0] == 'g',s[6] == 'g',(s[0] == 'g' and s[1] == 'a'),s[-2] == 'x',s[0] == s[-1],s[-4:] == \"tion\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "6\n",
      "0.45454545454545453\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# 2.19\n",
    "\n",
    "answers = ['Y', 'N', 'N', 'Y', 'N', 'Y', 'Y', 'Y', 'N', 'N', 'N']\n",
    "numYes = answers.count('Y')\n",
    "numNo = answers.count('N')\n",
    "percentYes = answers.count('Y')/len(answers)\n",
    "x=answers.sort()\n",
    "print(numYes)\n",
    "print(numNo)\n",
    "print(percentYes)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'pot'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2.20\n",
    "s='top'\n",
    "s[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'nm'"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2.21\n",
    "s='nabeel'\n",
    "t='muaz'\n",
    "s[0]+t[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
